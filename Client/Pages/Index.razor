@page "/"
@using System.IO
@using System.Collections.Generic
@using System
@using System.Text
@using Capstone.Shared 
@inject HttpClient HttpClient

<style>
    .index-container {
        height: 95vh;
        width: 100%;
    }

    .filter-container {
        padding-top: 2.5vh;
        height: 10vh;
        width: 100%;
        display: flex;
    }

    .button-div {
        height: 5vh;
        width: 95%;
        margin-right: 2.5%;
        margin-left: 2.5%;
        margin-top: 5vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .main-container {
        height: 75vh;
        width: 100%;
        margin: auto;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .filter {
        height: 10vh;
        width: calc(100vw/5);
        margin-left: 2.5%;
        margin-right: 2.5%;
    }


    Label {
        color: black;
        font-weight: 500;
        font-size: 1.5em;
        font-family: opensans-condensed-bold;
    }

    iframe {
        height: 70vh;
        width: 100%;
    }

    .button-search {
        background-color: #FFCC00;
        font-size: 1em;
        text-align: center;
        color: #003340;
        width: 200px;
        height: 5vh;
        line-height: 5vh;
        margin-right: 10px;
        border: none;
        border-radius: 20px;
        font-family: opensans-condensed-bold;
    }
</style>

<div class="index-container">
    <div class="filter-container">
        <div class="filter">
            <MudSelect T="string" MultiSelection="true" Class="mudselect" SelectAll="true" SelectAllText="Select All Dates" @bind-Value="Datevalue" @bind-SelectedValues="Dateoptions" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetDates))" Label="Dates" AdornmentIcon="@Icons.Material.Filled.Search">
                @foreach (var date in Dates)
                {
                    <MudSelectItem T="string" Value="@date">@date</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="filter">
            <MudSelect T="string" MultiSelection="true" Class="mudselect" SelectAll="true" SelectAllText="Select All Projects" @bind-Value="Projectvalue" @bind-SelectedValues="Projectoptions" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetProjects))" Label="Project" AdornmentIcon="@Icons.Material.Filled.Search">
                @foreach (var project in Projects)
                {
                    <MudSelectItem T="string" Value="@project">@project</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="filter">
            <MudSelect T="string" MultiSelection="true" Class="mudselect" SelectAll="true" SelectAllText="Select All Reource Groups" @bind-Value="ResourceGroupvalue" @bind-SelectedValues="ResourceGroupoptions" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetResourceGroups))" Label="Resource Groups" AdornmentIcon="@Icons.Material.Filled.Search">
                @foreach (var resourcegroup in ResourceGroups)
                {
                    <MudSelectItem T="string" Value="@resourcegroup">@resourcegroup</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="filter">
            <MudSelect T="string" MultiSelection="true" Class="mudselect" SelectAll="true" SelectAllText="Select All Subscriptions" @bind-Value="Subscriptionvalue" @bind-SelectedValues="Subscriptionoptions" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetSubscriptions))" Label="Subscriptions" AdornmentIcon="@Icons.Material.Filled.Search">
                @foreach (var subscription in Subscriptions)
                {
                    <MudSelectItem T="string" Value="@subscription">@subscription</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="filter">
            <MudSelect T="string" MultiSelection="true" Class="mudselect" SelectAll="true" SelectAllText="Select All Vendors" @bind-Value="Vendorvalue" @bind-SelectedValues="Vendoroptions" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetVendors))" Label="Vendors" AdornmentIcon="@Icons.Material.Filled.Search">
                @foreach (var vendor in Vendors)
                {
                    <MudSelectItem T="string" Value="@vendor">@vendor</MudSelectItem>
                }
            </MudSelect>
        </div>
    </div>
    <div class="button-div">
        <input type="button" class="button-search" value="Clear" @onclick="Clear" />
        <input type="button" class="button-search" value="Filter" @onclick="BeginFilter" />
    </div>
    <div class="main-container">
        <iframe src="@link"></iframe>
    </div>
</div>

@code{

    public string mainlink = "https://app.powerbi.com/reportEmbed?reportId=4404ecbd-708d-497a-8164-a3dc11260ca9&autoAuth=true&ctid=92454335-564e-4ccf-b0b0-24445b8c03f7&config=eyJjbHVzdGVyVXJsIjoiaHR0cHM6Ly93YWJpLW5vcnRoLWV1cm9wZS1pLXByaW1hcnktcmVkaXJlY3QuYW5hbHlzaXMud2luZG93cy5uZXQvIn0%3D&pageName=ReportSectionc15b8c90aaa4eb154d3b";
    private string link;
    private string mainfilter;
    private string filterstart = "&$filter=";

    private string datefilter;
    private string projectfilter;
    private string resourcegroupfilter;
    private string subscriptionfilter;
    private string vendorfilter;

    private string Datevalue { get; set; } = "";
    private string Projectvalue { get; set; } = "";
    private string ResourceGroupvalue { get; set; } = "";
    private string Subscriptionvalue { get; set; } = "";
    private string Vendorvalue { get; set; } = "";

    private IEnumerable<string> Dateoptions;
    private IEnumerable<string> Projectoptions;
    private IEnumerable<string> ResourceGroupoptions;
    private IEnumerable<string> Subscriptionoptions;
    private IEnumerable<string> Vendoroptions;

    private string selectedDatesString;
    private string selectedProjectsString;
    private string selectedResourceGroupsString;
    private string selectedSubscriptionsString;
    private string selectedVendorsString;

    private string selectDatesString;
    private string selectProjectsString;
    private string selectResourceGroupsString;
    private string selectSubscriptionsString;
    private string selectVendorsString;

    private List<string> selectedDates;
    private List<string> selectedProjects;
    private List<string> selectedResourceGroups;
    private List<string> selectedSubscriptions;
    private List<string> selectedVendors;


    private string[] Dates =
    {
        "Dec 2017", "Jan 2018", "Feb 2018"
    };
    private string[] Projects =
    {
        "48 TBD", "Akila Foods", "AMC KSA"
    };
    private string[] ResourceGroups =
    {
        "$system", "1Password", "Alerts"
    };
    private string[] Subscriptions =
    {
        "AWS New", "48 Software", "Group IT"
    };
    private string[] Vendors =
    {
        "AWS", "Azure", "Azure CSP"
    };

    private Filters filters = new Filters();

    protected override async Task OnInitializedAsync()
    {
        await Clear();
    }

    private string GetDates(List<string> selectedValues)
    {
        selectedDatesString = string.Join(",%20", selectedValues);
        selectDatesString = string.Join(", ", selectedValues);
        selectedDates = selectedValues;
        return $"{selectDatesString}";
    }

    private string GetProjects(List<string> selectedValues)
    {
        selectedProjectsString = string.Join(",%20", selectedValues);
        selectProjectsString = string.Join(", ", selectedValues);
        selectedProjects = selectedValues;
        return $"{selectProjectsString}";
    }

    private string GetResourceGroups(List<string> selectedValues)
    {
        selectedResourceGroupsString = string.Join(",%20", selectedValues);
        selectResourceGroupsString = string.Join(", ", selectedValues);
        selectedResourceGroups = selectedValues;
        return $"{selectResourceGroupsString}";
    }

    private string GetSubscriptions(List<string> selectedValues)
    {
        selectedSubscriptionsString = string.Join(",%20", selectedValues);
        selectSubscriptionsString = string.Join(", ", selectedValues);
        selectedSubscriptions = selectedValues;
        return $"{selectSubscriptionsString}";
    }

    private string GetVendors(List<string>selectedValues)
    {
        selectedVendorsString = string.Join(",", selectedValues);
        selectVendorsString = string.Join(", ", selectedValues);
        selectedVendors = selectedValues;
        return $"{selectVendorsString}";
    }

    private void BeginFilter()
    {
        if (selectedVendors.Count() != 0)
        {
            buildVendorFilter();
            mainfilter = mainfilter+vendorfilter;
        }

        if (selectedDates.Count() != 0)
        {
            buildDateFilter();
            if (selectedVendors.Count() != 0)
            {
                mainfilter = mainfilter + "%20and%20" + datefilter;
            }
            else
            {
                mainfilter = mainfilter + datefilter;
            }

        }
        if (selectedResourceGroups.Count() != 0)
        {
            buildResourceGroupFilter();
            if (selectedDates.Count() != 0 || selectedVendors.Count()!=0)
            {
                mainfilter = mainfilter + "%20and%20" + resourcegroupfilter;
            }
            else
            {
                mainfilter = mainfilter + resourcegroupfilter;

            }

        }

        if (selectedSubscriptions.Count() != 0)
        {
            buildSubscriptionFilter();
            if (selectedDates.Count()!=0 || selectedVendors.Count()!=0 || selectedResourceGroups.Count() != 0)
            {
                mainfilter = mainfilter + "%20and%20" + subscriptionfilter;

            }
            else
            {
                mainfilter = mainfilter + subscriptionfilter;
            }

        }

        if (selectedProjects.Count() != 0)
        {
            buildProjectFilter();
            if (selectedDates.Count() != 0 || selectedVendors.Count() != 0 || selectedResourceGroups.Count() != 0 || selectedSubscriptions.Count() != 0)
            {
                mainfilter = mainfilter + "%20and%20" + projectfilter;

            }
            else
            {
                mainfilter = mainfilter + projectfilter;
            }

        }

        link = link + filterstart + mainfilter;
    }

    private void buildVendorFilter()
    {
        if (selectedVendors.Count() == Vendors.Length)
        {
            vendorfilter = "Subscription%2FVendor%20eq%20%27All%27";
        }
        else if (selectedVendors.Count() == 1)
        {
            vendorfilter = "Subscription%2FVendor%20eq%20%27" + selectedVendors[0]+ "%27";
        }
        else
        {
            vendorfilter = "Subscription%2FVendor%20in%20(";

            for (int i = 0; i < selectedVendors.Count; i++)
            {
                if (i == selectedVendors.Count - 1)
                {
                    vendorfilter = vendorfilter + "%27" + selectedVendors[i]+ "%27)";
                }
                else
                {
                    vendorfilter = vendorfilter + "%27" + selectedVendors[i] + "%27,";
                }
            }
        }
    }

    private void buildDateFilter()
    {
        if (selectedDates.Count() == Dates.Length)
        {
            datefilter = "Dates%2FFinancialPeriod%20eq%20%27All%27";
        }
        else if (selectedDates.Count() == 1)
        {
            datefilter = "Dates%2FFinancialPeriod%20eq%20%27" + selectedDates[0] + "%27";
        }
        else
        {
            datefilter = "Dates%2FFinancialPeriod%20in%20(";

            for (int i = 0; i < selectedDates.Count; i++)
            {
                if (i == selectedDates.Count - 1)
                {
                    datefilter = datefilter + "%27" + selectedDates[i] + "%27)";
                }
                else
                {
                    datefilter = datefilter + "%27" + selectedDates[i] + "%27,";
                }
            }
        }
    }
    private void buildSubscriptionFilter()
    {
        if (selectedSubscriptions.Count() == Subscriptions.Length)
        {
            subscriptionfilter = "Subscription%2FSubscriptionName%20eq%20%27All%27";
        }
        else if (selectedSubscriptions.Count() == 1)
        {
            subscriptionfilter = "Subscription%2FSubscriptionName%20eq%20%27" + selectedSubscriptions[0] + "%27";
        }
        else
        {
            subscriptionfilter = "Subscription%2FSubscriptionName%20in%20(";

            for (int i = 0; i < selectedSubscriptions.Count; i++)
            {
                if (i == selectedSubscriptions.Count - 1)
                {
                    subscriptionfilter = subscriptionfilter + "%27" + selectedSubscriptions[i] + "%27)";
                }
                else
                {
                    subscriptionfilter = subscriptionfilter + "%27" + selectedSubscriptions[i] + "%27,";
                }
            }
        }
    }
    private void buildResourceGroupFilter()
    {
        if (selectedResourceGroups.Count() == ResourceGroups.Length)
        {
            resourcegroupfilter = "ResourceGroup%2FResourceGroupName%20eq%20%27All%27";
        }
        else if (selectedResourceGroups.Count() == 1)
        {
            resourcegroupfilter = "ResourceGroup%2FResourceGroupName%20eq%20%27" + selectedResourceGroups[0] + "%27";
        }
        else
        {
            resourcegroupfilter = "ResourceGroup%2FResourceGroupName%20in%20(";

            for (int i = 0; i < selectedResourceGroups.Count; i++)
            {
                if (i == selectedResourceGroups.Count - 1)
                {
                    resourcegroupfilter = resourcegroupfilter + "%27" + selectedResourceGroups[i] + "%27)";
                }
                else
                {
                    resourcegroupfilter = resourcegroupfilter + "%27" + selectedResourceGroups[i] + "%27,";
                }
            }
        }
    }

    private void buildProjectFilter()
    {
        if (selectedProjects.Count() == Projects.Length)
        {
            projectfilter = "CostCentre%2FCostCentre%20eq%20%27All%27";
        }
        else if (selectedProjects.Count() == 1)
        {
            projectfilter = "CostCentre%2FCostCentre%20eq%20%27" + selectedProjects[0] + "%27";
        }
        else
        {
            projectfilter = "CostCentre%2FCostCentre%20in%20(";

            for (int i = 0; i < selectedProjects.Count; i++)
            {
                if (i == selectedProjects.Count - 1)
                {
                    projectfilter = projectfilter + "%27" + selectedProjects[i] + "%27)";
                }
                else
                {
                    projectfilter = projectfilter + "%27" + selectedProjects[i] + "%27,";
                }
            }
        }
    }
    private async Task Clear()
    {
        mainfilter = "";
        link = mainlink;

        datefilter = "";
        projectfilter = "";
        resourcegroupfilter = "";
        subscriptionfilter = "";
        vendorfilter = "";

        selectedDatesString = "";
        selectedProjectsString = "";
        selectedResourceGroupsString = "";
        selectedSubscriptionsString = "";
        selectedVendorsString = "";

        Dateoptions = new HashSet<string>();
        Projectoptions = new HashSet<string>();
        ResourceGroupoptions = new HashSet<string>();
        Subscriptionoptions = new HashSet<string>();
        Vendoroptions = new HashSet<string>();

        selectedDates = new List<string>();
        selectedProjects = new List<string>();
        selectedResourceGroups = new List<string>();
        selectedSubscriptions = new List<string>();
        selectedVendors = new List<string>();
    }
}